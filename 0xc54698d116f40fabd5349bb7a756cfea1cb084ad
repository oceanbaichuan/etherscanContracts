/**
 *Submitted for verification at Etherscan.io on 2019-07-26
*/

pragma solidity >=0.4.22 <0.7.0;







/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, "SafeMath: modulo by zero");
        return a % b;
    }
}


library StringUtils {
  /// @dev Does a byte-by-byte lexicographical comparison of two strings.
  /// @return a negative number if `_a` is smaller, zero if they are equal
  /// and a positive numbe if `_b` is smaller.
  function compare(string memory _a, string memory _b) internal pure returns(int) {
    bytes memory a = bytes(_a);
    bytes memory b = bytes(_b);
    uint minLength = a.length;
    if (b.length < minLength) { 
      minLength = b.length;
    }
    //@todo unroll the loop into increments of 32 and do full 32 byte comparisons
    for (uint i = 0; i < minLength; i++) {
      if (a[i] < b[i]) return -1;
      else if (a[i] > b[i]) return 1;
    }

    if (a.length < b.length) {
      return -1;
    } else if (a.length > b.length) {
      return 1;
    } else {
      return 0;
    }
  }

  /// @dev Compares two strings and returns true iff they are equal.
  function equal(string memory _a, string memory _b) internal pure returns(bool) {
    return compare(_a, _b) == 0;
  }

  /// @dev Finds the index of the first occurrence of _needle in _haystack
  function indexOf(string memory _haystack, string memory _needle) internal pure returns(int) {
    bytes memory h = bytes(_haystack);
    bytes memory n = bytes(_needle);
    if (h.length < 1 || n.length < 1 || (n.length > h.length)) {
      return -1;
    } else if (h.length > (2 ** 128 - 1)) {
      // since we have to be able to return -1 (if the char isn't found or input error), 
      // this function must return an "int" type with a max length of (2^128 - 1)
      return -1;
    } else {
      uint subindex = 0;
      for (uint i = 0; i < h.length; i++) {
        if (h[i] == n[0]) { // found the first char of b
          subindex = 1;
          while (
            subindex < n.length 
            && (i + subindex) < h.length 
            && h[i + subindex] == n[subindex]
          ) { // search until the chars don't match or until we reach the end of a or b
            subindex++;
          }
          
          if (subindex == n.length)
            return int(i);
        }
      }
      return -1;
    }
  }
}


/**
 * A library for only submit hash string to blockchain
 *
 */
library HashOperateLib {
  using SafeMath for uint256;
  using StringUtils for string;

  struct ExInfo {
    address saver;
    string saverName;
    uint256 saveTime;
  }

  struct Info {
    mapping(string => ExInfo) hashInfo;
    string[] hashLib;
  }

  /**
   * @dev insertHash,insert method
   * @param  _self is where the data will be saved
   * @param  _hash is input value of hash
   * @return bool,true is successful and false is failed
   */
  function insertHash(Info storage _self, string memory _hash, string memory _saverName) 
    internal 
    returns (bool) 
  {
    if (_self.hashInfo[_hash].saveTime > 0) {
      return false;
    } else {
      _self.hashInfo[_hash].saver = msg.sender; // not msg.sender, we need the origin TX submitter;
      _self.hashInfo[_hash].saveTime = now;
      _self.hashInfo[_hash].saverName = _saverName;
      _self.hashLib.push(_hash);

      return true;
    }
  }

  /**
   * @dev deleteHash,delete method
   * @param  _self is where the data will be saved
   *         _hash is input value of hash
   * @return bool,true is successful and false is failed
   */
  function deleteHash(Info storage _self, string memory _hash) internal returns (bool) {
    require(!_hash.equal(""));
    if (_self.hashInfo[_hash].saveTime > 0) {
      delete _self.hashInfo[_hash];
      removeHash(_self, _hash);
      return true;
    } else {
      return false;
    }
  }

  /**
   * @dev selectHash,select method
   * @param  _self is where the data will be saved
   *         _hash is input value of hash
   * @return true/false,saver,save time
   */
  function selectHash(Info storage _self, string memory _hash) 
    internal 
    view 
    returns (bool, address, string memory, uint256) 
  {
    if (_self.hashInfo[_hash].saveTime > 0) {
      return (
        true, 
        _self.hashInfo[_hash].saver,
        _self.hashInfo[_hash].saverName, 
        _self.hashInfo[_hash].saveTime
      );
    } else {
      return (false, address(0), "", 0);
    }
  }

  /**
   * @dev getHashByInd,get one hash string by its index
   * @param  _self is where the data will be saved
   *         _ind is input value of the index
   * @return string, the hash string
   */
  function getHashByInd(Info storage _self, uint _ind) internal view returns (string memory) {
    return (_self.hashLib[_ind]);
  }

  /**
   * @dev getHashByInd,get one hash string by its index
   * @param  _self is where the data will be saved
   *         _ind is input value of the index
   * @return string, the hash string
   */
  function isHashExisted(Info storage _self, string memory _hash) 
    internal 
    view 
    returns (bool) 
  {
    return (_self.hashInfo[_hash].saveTime > 0);
  }

  /**
   * @dev remove a hash value from hash info storage
   *
   * @param _hashStr the account address in the list
   */
  function removeHash(Info storage _self, string memory _hashStr) internal returns (bool) {
    uint i = 0;
    for (; i < _self.hashLib.length; i = i.add(1)) {
      if (_self.hashLib[i].equal(_hashStr)) 
        break;
    }

    if (i >= _self.hashLib.length)
      return false;

    uint lastInd = _self.hashLib.length.sub(1);
    while (i < lastInd) {
      _self.hashLib[i] = _self.hashLib[i.add(1)];
      i = i.add(1);
    }

    delete _self.hashLib[lastInd];
    _self.hashLib.length = lastInd;

    return true;
  }

}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be aplied to your functions to restrict their use to
 * the owner.
 */
contract Ownable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        _owner = msg.sender;
        emit OwnershipTransferred(address(0), _owner);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(isOwner(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Returns true if the caller is the current owner.
     */
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * > Note: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}
/*
 * @title String & slice utility library for Solidity contracts.
 * @author Nick Johnson <